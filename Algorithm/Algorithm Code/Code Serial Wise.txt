//Shortest path

//Ekhane ektay 3 ta ache
package ShortestPath;

import java.util.*;

public class Dijkstra {
    static final int INF = 100000;

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.println("Hello Word!!");

        int n, m;
        n = input.nextInt();
        m = input.nextInt();
       

        // Initialize the distances array
        int[] dist = new int[n + 1];
        Arrays.fill(dist, INF);

        List<List<Pair>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < m; i++) {
            int u, v, w;
            u = input.nextInt();
            v = input.nextInt();
            w = input.nextInt();
            graph.get(u).add(new Pair(v, w)); // single destination shortest path??
                                // je graph use korbo tar direction change kore dibo tahole seta single destination shortest path
                                // hoye jabe
            graph.get(v).add(new Pair(u, w));
        }

        int s; //when use signle destination shortest path use here destination to find the and other node which is indicat
        //line  80 after dijkstra use then print this  System.out.println(dist[4]);
        s = input.nextInt();
        dist[s] = 0;

        TreeSet<Pair> set = new TreeSet<>();
 // print the table first iteration start
        for (int i = 1; i <= n; i++) {
            if (dist[i] < INF)
                System.out.print(dist[i] + "\t");
            else
                System.out.print(-1 + "\t");
        }
        System.out.println();
     // print the table first iteration end

        set.add(new Pair(0, s));

        while (!set.isEmpty()) {
            Pair x = set.pollFirst();
            int u = x.y;

            for (Pair i : graph.get(u)) {
                if (dist[i.x] > dist[u] + i.y) {
                    set.remove(new Pair(dist[i.x], i.x));
                    dist[i.x] = dist[u] + i.y;
                    set.add(new Pair(dist[i.x], i.x));
                }
            }

            // print the table others iteration start
            for (int i = 1; i <= n; i++) {
                if (dist[i] < INF)
                    System.out.print(dist[i] + "\t");
                else
                    System.out.print(-1 + "\t");
            }
            System.out.println();
             // print the table others iteration end
        }

        // single pair shortest path
        System.out.println(dist[4]);

        System.out.println("Single Source shortest path output");
        //  cout << "\nSingle Destination shortest path output\n";// jodi graph directed hoy and direction chage kore dei tahole eta single destinatio
    //destination shorest path hobe
        for (int i = 1; i <= n; i++) {
            System.out.print(dist[i] + "  ");
        }

        input.close();
    }

    static class Pair implements Comparable<Pair> {
        int x;
        int y;

        public Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int compareTo(Pair other) {
            if (this.x != other.x)
                return Integer.compare(this.x, other.x);
            else
                return Integer.compare(this.y, other.y);
        }
    }
}

//End shortest path (Single souce,Single Destination,Single Pair)

//Node_Cost_using Dijkstra

import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

class Node_Cost {
    private static final int INF = 100000;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        List<List<Pair>> adj = new ArrayList<>();
        int[] node_cost = new int[n];

        for (int i = 0; i < n; i++) {
            node_cost[i] = scanner.nextInt();
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < m; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int w = scanner.nextInt();
            u--;
            v--;
            adj.get(u).add(new Pair(v, w));
            adj.get(v).add(new Pair(u, w));
        }

        int[] dist = new int[n];
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            dist[i] = INF;
        }
        dist[0] = node_cost[0];

        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(dist[0], 0));

        while (!pq.isEmpty()) {
            int u = pq.poll().second;

            if (visited[u]) {
                continue;
            }
            visited[u] = true;

            for (Pair e : adj.get(u)) {
                int v = e.first;
                int w = e.second;

                if (dist[u] + w + node_cost[v] < dist[v]) {
                    dist[v] = dist[u] + w + node_cost[v];
                    pq.add(new Pair(dist[v], v));
                }
            }
        }

        System.out.println();
        for (int i = 0; i < n; i++) {
            System.out.print(dist[i] + " ");
        }
        System.out.println();
        System.out.println(dist[n - 1]);
    }

    static class Pair implements Comparable<Pair> {
        int first;
        int second;

        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }

        @Override
        public int compareTo(Pair other) {
            return Integer.compare(this.first, other.first);
        }
    }
}

/*
6 8
1
2
3
4
5
6
1 2 2
1 3 4
2 4 7
3 5 3
4 6 1
5 4 2
5 6 5
2 3 1


*/
//End Node cost


//ChepestPath with Stop
package ShortestPath;

import java.util.*;

public class CheapestPathWithStops {
    static final int INF = 100000;

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.println("Hello World!!\n");

        int n, m;
        n = input.nextInt();
        m = input.nextInt();

        List<Pair> dist = new ArrayList<>(n + 1);
        for (int i = 0; i <= n; i++) {
            dist.add(new Pair(INF, 0));
        }

        List<List<Pair>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < m; i++) {
            int u, v, w;
            u = input.nextInt();
            v = input.nextInt();
            w = input.nextInt();
            graph.get(u).add(new Pair(v, w));
            graph.get(v).add(new Pair(u, w));
        }

        int s, dst, K;
        s = input.nextInt();
        dst = input.nextInt();
        K = input.nextInt();
        dist.set(s, new Pair(0, 1));

        TreeSet<Triple> set = new TreeSet<>();
        for (int i = 1; i <= n; i++) {
            if (dist.get(i).x < INF)
                System.out.print(dist.get(i).x + "\t");
            else
                System.out.print(-1 + "\t");
        }
        System.out.println();

        set.add(new Triple(0, 1, s));

        while (!set.isEmpty()) {
            Triple x = set.pollFirst();
            int node = x.z;
            int cost = x.x;
            int stops = x.y;

            if (stops > K)
                continue;

            for (Pair i : graph.get(node)) {
                if (dist.get(i.x).x > cost + i.y) {
                    set.remove(new Triple(dist.get(i.x).x, dist.get(i.x).y, i.x));
                    dist.set(i.x, new Pair(cost + i.y, stops + 1));
                    set.add(new Triple(dist.get(i.x).x, dist.get(i.x).y, i.x));
                }
            }

            for (int i = 1; i <= n; i++) {
                if (dist.get(i).x < INF)
                    System.out.print(dist.get(i).x + "\t");
                else
                    System.out.print(-1 + "\t");
            }
            System.out.println();
        }

        System.out.println("Cheapest cost path with at most " + K + " stops from source " + s + " to destination " + dst + " is: ");
        if (dist.get(dst).x < INF)
            System.out.println(dist.get(dst).x);
        else
            System.out.println("No path found.");

        input.close();
    }

    static class Pair {
        int x;
        int y;

        public Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    static class Triple implements Comparable<Triple> {
        int x;
        int y;
        int z;

        public Triple(int x, int y, int z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        public int compareTo(Triple other) {
            if (this.x != other.x)
                return Integer.compare(this.x, other.x);
            else if (this.y != other.y)
                return Integer.compare(this.y, other.y);
            else
                return Integer.compare(this.z, other.z);
        }
    }
}

//End cheapest path with stop

//MST
package MST;

import java.util.*;
public class kal {
    static final int N = 9999;
    static Vector<Integer> p = new Vector<Integer>(N + 1);

    // every vertex is parent initialized
    static void MakeSet(int v) {
        p.set(v, v);
    }

    // Check parent same or not??
    static int FindSet(int v) {
        if (v == p.get(v))
            return v;
        return p.set(v, FindSet(p.get(v)));
    }

    // ALL parent are making same?
    static void UnionSet(int a, int b) {
        int x = FindSet(a);
        int y = FindSet(b);
        if (x != y)
            p.set(y, x);
    }

    public static void main(String[] args) {
        int cost = 0;
        Vector<Vector<Integer>> edges = new Vector<Vector<Integer>>();
        Scanner input = new Scanner(System.in);
        int vertex = input.nextInt();
        int e = input.nextInt();
        for (int i = 0; i <= N; i++) {
            p.add(i);
            MakeSet(i);
        }
        for (int i = 0; i < e; i++) {
            Vector<Integer> ed = new Vector<Integer>();
            int w = input.nextInt();
            int u = input.nextInt();
            int v = input.nextInt();
            ed.add(w);
            ed.add(u);
            ed.add(v);
            edges.add(ed);
        }
        Collections.sort(edges, new Comparator<Vector<Integer>>() {
            @Override
            public int compare(Vector<Integer> a, Vector<Integer> b) {
                return a.get(0) - b.get(0);
            }
        });
         int Cycle=0;
         boolean flag=false;
        for (Vector<Integer> i : edges) {
            int w = i.get(0);
            int u = i.get(1);
            int v = i.get(2);
            int x = FindSet(u);
            int y = FindSet(v);
            if (x == y) {
                Cycle++;
                flag = true;
                continue;
            } else {
                cost += w;
                System.out.println("Weight: "+ w +" Cost :"+cost);
                UnionSet(u, v);
            }
        }
            
        if(flag){
            System.out.println("How many Cycle exit in the graph: "+Cycle);
        }
        System.out.println("Minimum Cost: " + cost);
    }

}

/* 
8 9
1 2 5
2 3 6
4 3 2
1 4 9
3 5 5
5 6 10
6 7 7
7 8 1
8 5 1


8 9
5 1 2 
6 2 3 
2 4 3 
9 1 4 
5 3 5 
10 5 6 
7 6 7 
1 7 8 
1 8 5 

   2    3
(0)--(1)--(2)
 |   / \   |
6| 8/   \5 |7
 | /     \ |
(3)-------(4)
      9    
5 7      
0 2 1
1 3 2
0 6 3
3 9 4
1 8 3
1 5 4
2 7 4   

5 7      
2 0 1
3 1 2
6 0 3
9 3 4
8 1 3
5 1 4
7 2 4 
      


      */

//Prims algorithm
package MST;

import java.util.*;

public class Prim {
    static final int N = 999;
    static final int INF = 100000;
    static int n, m, cost;
    static List<List<int[]>> g = new ArrayList<>();
    static boolean[] vis = new boolean[N];
    static int[] dist = new int[N];

    public static void primMST(int source) {
        Arrays.fill(dist, INF);
        dist[source] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        pq.offer(new int[] { 0, source });

        while (!pq.isEmpty()) {
            int[] x = pq.poll();
            int w = x[0];
            int u = x[1];
            if (vis[u])
                continue;

            vis[u] = true;
            cost += w;

            for (int[] i : g.get(u)) {
                if (vis[i[0]])
                
                    continue;
                if (dist[i[0]] > i[1]) {
                    dist[i[0]] = i[1];
                    pq.offer(new int[] { dist[i[0]], i[0] });
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();

        for (int i = 0; i <= n; i++) {
            g.add(new ArrayList<>());
        }

        for (int i = 0; i < m; i++) {
            int w = sc.nextInt();
            int u = sc.nextInt();
            int v = sc.nextInt();
            g.get(u).add(new int[] { v, w });
            g.get(v).add(new int[] { u, w });
        }

        primMST(1);
        System.out.println(cost);
    }
}

//LCS Common sequenc print
package LIS_LCS;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class CommonSubsequences {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String s1 = input.nextLine();
        String s2 = input.nextLine();
        input.close();
        // String s1 = "AGGTAB";ACDF
        // String s2 = "GXTXAYB";ABCDEF

        Set<String> commonSubsequences = findCommonSubsequences(s1, s2);

        List<String> sortedSubsequences = new ArrayList<>(commonSubsequences);
        Collections.sort(sortedSubsequences, (a, b) -> b.length() - a.length());

        if (sortedSubsequences.isEmpty()) {
            System.out.println("No common subsequences found.");
        } else {
            System.out.println("Common Subsequences (in descending order of lengths):");
            for (String subsequence : sortedSubsequences) {
                System.out.println(subsequence);
            }
        }
    }

    public static Set<String> findCommonSubsequences(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();

        Set<String>[][] dp = new HashSet[m + 1][n + 1];

        // Initialize the table
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                dp[i][j] = new HashSet<>();
            }
        }
        // Build the table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    for (String subseq : dp[i - 1][j - 1]) {
                        dp[i][j].add(subseq + s1.charAt(i - 1));
                    }
                    dp[i][j].add(String.valueOf(s1.charAt(i - 1)));
                } else {
                    dp[i][j].addAll(dp[i - 1][j]);
                    dp[i][j].addAll(dp[i][j - 1]);
                }
            }
        }
        return dp[m][n];
    }
}

//LCS 
package LIS_LCS;

public class LCS {
    public static int lcs(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();
      
        int[][] dp = new int[m + 1][n + 1];

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);
                }
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
        int i = m, j = n;
        // Which element are selected
        StringBuilder lcsBuilder = new StringBuilder();
        while (i > 0 && j > 0) {
            if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                lcsBuilder.insert(0, s2.charAt(j - 1)); // Append character to the LCS
                // lcsBuilder.insert(0, s1.charAt(i - 1)); // Append character to the LCS
                i--;
                j--;
            } else if (dp[i][j - 1] > dp[i - 1][j]) {
                j--;
            } else {
                i--;
            }
        }
      

        System.out.println("Longest Common Subsequence: " + lcsBuilder.toString());

        return dp[m][n];

    }

    public static void main(String[] args) {
        // String s1 = "ABCDEFGH";
        // String s2 ="abcdefgh";
        // String s1 = "ACADB";
        // String s2 = "CBDA";
        String s1 = "AGGTAB";
        String s2 = "GXTXAYB";
        System.out.println("Length of LCS is " + lcs(s1, s2));
    }
}

//End here LCS and sequences


//String matching
package Pattern_Matching;

public class Naive {
    public static void main(String[] args) {
        //using interger
        // int[] arr1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        // int[] arr2 = {5, 6};
        String s1 = "this test is a test text";
        String s2 = "test";
        search(s1, s2);
    }

    private static void search(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        int flag = 0;
        for (int i = 0; i <= n - m; i++) {
            int j;
            for (j = 0; j < m; j++) {
                if (s1.charAt(i + j) != s2.charAt(j))// if (arr1[i + j] != arr2[j]) all are same
                    break;
            }
            if (j == m) {
                flag++;
                System.out.println("Pattern found at index[i:j] =["+i+":"+(j-1+i)+"]");

            }

        }
        if (flag == 0)
            System.out.println("Pattern not found!!!");
        else
            System.out.println("How many times found : " + flag);

    }
}

//Delete how many item then find the common sequencs

import java.util.Scanner;

public class Deletion {
    public static int lcs(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();

        int[][] dp = new int[m + 1][n + 1];

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);
                }
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
        int i = m, j = n;
        int mismatchCount = 0;
        while (i > 0 && j > 0) {
            if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                i--;
                j--;
            } else if (dp[i][j - 1] > dp[i - 1][j]) {
                mismatchCount++;
                j--;
            } else {
                mismatchCount++;
                i--;
                j--;
            }
        }

        System.out.println("Mismatched character count: " + mismatchCount);

        return dp[m][n];
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String s1 = input.nextLine();
        String s2 = input.nextLine();
        System.out.println("Length of LCS is " + lcs(s1, s2));
    }
}


//End LCS And String

//KnapSack_with_Duplicate value;

package KnapSack;

public class K_P {
    public static void main(String[] args) {
        // Input: N = 2, W = 3
        // val[] = {1, 1}
        // wt[] = {2, 1}
        // int P[] = { 0,1, 4, 5, 7 };
        // int w[] = { 0, 1, 3, 4, 5 };
        int P[] = { 0, 1, 1 };
        int w[] = { 0, 2, 1 };
        // int m = 8;
        // int n = 4;
        int m = 3;
        int n = 2;
        int T[][] = new int[n + 1][m + 1];
        System.out.println("Store the element of table using Table method ");
        Table(n, m, T, w, P);

        /// Which object Selected
        Selected(n, m, T, w);
    }

    private static void Table(int N, int W, int[][] T, int[] w, int[] P) {
        int weight=1, object;
        for (object = 1; object <= N; object++) {
            for (weight = 1; weight <= W; weight++) {
                if (weight == 0 || object == 0)
                    T[object][weight] = 0;
                else if (w[object] <= weight) {
                    int maxProfit = 0;
                    for (int repetitions = 1; repetitions <= weight / w[object]; repetitions++) {
                        maxProfit = Math.max(maxProfit, T[object - 1][weight - repetitions * w[object]] + repetitions * P[object]);
                    }
                    T[object][weight] = Math.max(T[object - 1][weight], maxProfit);
                } else
                    T[object][weight] = T[object - 1][weight];

                System.out.print(T[object][weight] + " ");
            }
            System.out.println();
        }

        System.out.print("\nMaximum Profit: " + T[object - 1][weight - 1] + " ");
    }

    private static void Selected(int n, int m, int[][] T, int[] w) {
        int i = n, j = m;
        System.out.println("\nHere 1 means Selected and 0 means Deselected ");
        while (i > 0 && j > 0) {
            if (T[i][j] != T[i - 1][j]) {
                System.out.println("Object:" + i + " = 1");
                j = j - w[i];
                i--;
            } else {
                System.out.println("Object:" + i + " = 0");
                i--;
            }
        }
    }
    
}

/*
 * class Solution{
    static int knapSack(int N, int W, int val[], int wt[])
    {
       int[][] dp = new int[N + 1][W + 1];

        for (int i = 1; i <= N; i++) {
            for (int w = 1; w <= W; w++) {
                if (wt[i - 1] <= w) {
                    dp[i][w] = Math.max(dp[i - 1][w], val[i - 1] + dp[i][w - wt[i - 1]]);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }
       
        return dp[N][W];
    }
}
 */

//KnapSack Normal
package KnapSack;

public class Knapsack_0_1 {
    public static void main(String[] args) {
        // int p[] = {  1, 2, 3 };
        // int wt[] = { 4, 5,1 };
        int p[] = { 0, 1, 2, 5, 6 };
        int wt[] = { 0, 2, 3, 4, 5 };
        // int p[] = { 0, 1, 1 };
        // int wt[] = { 0, 2, 1 };
        // int m = 3, n = 2, w=0, ob;
        int m = 8, n = 4, w=0, ob;
        int k[][] = new  int[5][9];
        for (ob = 0; ob <= n; ob++) {
            for (w = 0; w <= m; w++) {
                if (w == 0 || ob == 0)
                    k[ob][w] = 0;
                else if (wt[ob] <= w)
                    k[ob][w] = Math.max(p[ob] + k[ob - 1][w - wt[ob]], k[ob - 1][w]);
                else
                    k[ob][w] = k[ob - 1][w];

                System.out.print(k[ob][w] + " ");
            }
            System.out.println();
        }
        //System.out.println("\nMaximum profit: "+k[ob-1][w-1]);
        System.out.println("\nMaximum profit: "+k[n][m]);
        int i = n, j = m;
        System.out.println("\nSelect the object: ");
        while (i >0 && j >= 0) {
            if (k[i][j] == k[i - 1][j]) {
                System.out.println(i + " =0");
                i--;

            } else {
               // System.out.println(j+"??");
                System.out.println(i + " =1");
                j = j - wt[i];
               // System.out.println(j+"?");
                i--;

            }

        }
    }
}

//End KnapSack Problem


//Huffman Code
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Scanner;

class HuffmanNode {
    Character character;
    Integer frequency;
    HuffmanNode left = null, right = null;

    HuffmanNode(Character character, Integer frequency) {
        this.character = character;
        this.frequency = frequency;
    }

    public HuffmanNode(Character character, Integer frequency, HuffmanNode left, HuffmanNode right) {
        this.character = character;
        this.frequency = frequency;
        this.left = left;
        this.right = right;
    }
}

public class Huffman {
    public static void encode(HuffmanNode root, String str, Map<Character, String> huffmanCode) {
        if (root == null) {
            return;
        }

        if (isLeaf(root)) {
            huffmanCode.put(root.character, str.length() > 0 ? str : "1");
        }

        encode(root.left, str + '0', huffmanCode);
        encode(root.right, str + '1', huffmanCode);
    }

    public static int decode(HuffmanNode root, int index, StringBuilder sb) {
        if (root == null) {
            return index;
        }

        if (isLeaf(root)) {
            System.out.print(root.character);
            return index;
        }

        index++;

        root = (sb.charAt(index) == '0') ? root.left : root.right;
        index = decode(root, index, sb);
        return index;
    }

    public static boolean isLeaf(HuffmanNode root) {
        return root.left == null && root.right == null;
    }

    public static void createTree(String text) {
        if (text == null || text.length() == 0) {
            return;
        }

        Map<Character, Integer> frequency = new HashMap<>();
        for (char c : text.toCharArray()) {
            frequency.put(c, frequency.getOrDefault(c, 0) + 1);
        }

        System.out.println("Frequency Table: " + frequency);

        PriorityQueue<HuffmanNode> queue;
        queue = new PriorityQueue<>(Comparator.comparingInt(l -> l.frequency));

        for (var entry : frequency.entrySet()) {
            queue.add(new HuffmanNode(entry.getKey(), entry.getValue()));
        }

        while (queue.size() != 1) {

            HuffmanNode left = queue.poll();
            HuffmanNode right = queue.poll();

            int sum = left.frequency + right.frequency;
            queue.add(new HuffmanNode(null, sum, left, right));
        }

        HuffmanNode root = queue.peek();

        Map<Character, String> huffmanCode = new HashMap<>();
        encode(root, "", huffmanCode);

        System.out.println("Huffman code table: " + huffmanCode);

        System.out.println("From: " + text);

        StringBuilder sb = new StringBuilder();
        for (char c : text.toCharArray()) {
            sb.append(huffmanCode.get(c));
        }

        System.out.println("To: " + sb);
    }

    public static void main(String[] args) {
          //String text = "BCAADDDCCACCACACEF";
        Scanner scanner = new Scanner(System.in);
        String text = scanner.nextLine();
        scanner.close();
        createTree(text);
    }
}

//End Huffman code
